#include <iostream>
#include <vector>
#include <queue>
#include <string>
#include <climits>
#include <functional>

using namespace std;

using ll = long long;

struct Edge {
    int to, weight;
};

struct State {
    int vertex;
    ll dist;
    bool operator>(const State& other) const { // Changed to operator>
        return dist > other.dist;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    string case_name;
    while (cin >> case_name) {
        int n, m;
        cin >> n >> m;

        // Read transition times between holes
        vector<vector<vector<int>>> times(n - 1, vector<vector<int>>(m, vector<int>(m)));
        for (int k = 0; k < n - 1; ++k) {
            for (int i = 0; i < m; ++i) {
                for (int j = 0; j < m; ++j) {
                    cin >> times[k][i][j];
                }
            }
        }

        // Build graph: node (k, i) is represented as k*m + i
        vector<vector<Edge>> adj(n * m);
        for (int k = 0; k < n - 1; ++k) {
            for (int i = 0; i < m; ++i) {
                for (int j = 0; j < m; ++j) {
                    int from = k * m + i;
                    int to = (k + 1) * m + j;
                    int weight = times[k][i][j] + 2;
                    adj[from].push_back({ to, weight });
                }
            }
        }

        // Dijkstra's algorithm
        vector<ll> dist(n * m, LLONG_MAX);
        priority_queue<State, vector<State>, greater<State>> pq;

        // Virtual source: connect to all holes on ground floor (k=0)
        for (int i = 0; i < m; ++i) {
            dist[i] = 0;
            pq.push({ i, 0 });
        }

        while (!pq.empty()) {
            State curr = pq.top();
            pq.pop();

            int u = curr.vertex;
            ll d = curr.dist;

            if (d > dist[u]) continue;

            for (const auto& edge : adj[u]) {
                int v = edge.to;
                ll new_dist = d + edge.weight;

                if (new_dist < dist[v]) {
                    dist[v] = new_dist;
                    pq.push({ v, new_dist });
                }
            }
        }

        // Find minimum time to reach any hole on (n-1)-th floor
        ll min_time = LLONG_MAX;
        for (int i = 0; i < m; ++i) {
            int vertex = (n - 1) * m + i;
            min_time = min(min_time, dist[vertex]);
        }

        // Output result
        cout << case_name << '\n' << min_time << '\n';
    }

    return 0;
}