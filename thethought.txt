#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MAXN = 1005;

vector<int> adj[MAXN];
bool visited[MAXN];
int disc[MAXN], low[MAXN], timer;
vector<pair<int, int>> bridges;

void dfs(int u, int parent) {
    visited[u] = true;
    disc[u] = low[u] = timer++;
    for (int v : adj[u]) {
        if (v == parent) continue;
        if (!visited[v]) {
            dfs(v, u);
            low[u] = min(low[u], low[v]);
            if (low[v] > disc[u]) {
                bridges.emplace_back(min(u, v), max(u, v));
            }
        }
        else {
            low[u] = min(low[u], disc[v]);
        }
    }
}

int main() {
    int n, m;
    while (cin >> n >> m, n || m) {
        // Reset everything
        for (int i = 0; i < n; ++i)
            adj[i].clear();
        fill(visited, visited + n, false);
        bridges.clear();
        timer = 0;

        // Read edges
        for (int i = 0; i < m; ++i) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        // Find bridges
        for (int i = 0; i < n; ++i)
            if (!visited[i])
                dfs(i, -1);

        // Sort the bridges
        sort(bridges.begin(), bridges.end());

        // Output
        cout << bridges.size();
        for (auto& e : bridges)
            cout << " " << e.first << " " << e.second;
        cout << endl;
    }

    return 0;
}